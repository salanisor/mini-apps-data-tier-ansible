---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: database
  namespace: {{ dt_namespace }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: database
  serviceName: database
  template:
    metadata:
      name: database
      labels:
        name: database
    spec:
      serviceAccountName: data-manager-api

      # We must have a 'core' node
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: informaticsmatters.com/purpose
                operator: In
                values:
                - core

      containers:
      - name: database
        image: {{ dt_database_image_registry }}/{{ dt_database_image_name }}:{{ dt_database_image_tag }}
{% if dt_database_image_tag in ['latest', 'stable'] %}
        imagePullPolicy: Always
{% else %}
        imagePullPolicy: IfNotPresent
{% endif %}
        terminationMessagePolicy: FallbackToLogsOnError
        ports:
        - containerPort: 5432
        resources:
          requests:
            cpu: {{ dt_database_cpu_request }}
            memory: {{ dt_database_mem_request }}
{% if dt_database_cpu_limit or dt_database_mem_limit %}
          limits:
{% if dt_database_cpu_limit %}
            cpu: {{ dt_database_cpu_limit }}
{% endif %}
{% if dt_database_mem_limit %}
            memory: {{ dt_database_mem_limit }}
{% endif %}
{% endif %}
        readinessProbe:
          initialDelaySeconds: 30
          failureThreshold: 9
          periodSeconds: 15
          timeoutSeconds: 5
          exec:
            command:
            - /bin/sh
            - -i
            - -c
            - pg_isready -h 127.0.0.1 -p 5432 -U postgres -q
        livenessProbe:
          # This probe results in PG issuing 'incomplete startup packet'
          # messages to the log. They're the result of probe
          # making a TCP connection but sending no traffic.
          initialDelaySeconds: 60
          timeoutSeconds: 1
          # Default period is 10 seconds
          periodSeconds: 20
          tcpSocket:
            port: 5432
        volumeMounts:
        # Persistent volume for data
        - mountPath: /var/lib/postgresql/data
          name: database-pvc
        - mountPath: /docker-entrypoint-initdb.d
          name: database-init
        env:
        # PGDATA - the location of persisted database files.
        # Normally a sub-directory of '/var/lib/postgresql/data'.
        # The PVC is mounted at '/var/lib/postgresql' and we use
        # PGDATA to identify a sub-directory in the mount.
        # If we don't postgres fails to start with the error: -
        #
        #   initdb: directory "/var/lib/postgresql/data" exists but is not empty
        #   It contains a lost+found directory, perhaps due to it being a mount point.
        #   Using a mount point directly as the data directory is not recommended.
        #   Create a subdirectory under the mount point.
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database
              key: user_password
        - name: POSTGRES_DATA_TIER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database
              key: data_tier_user_password
      volumes:
      - name: database-init
        configMap:
          name: database-init
      - name: database-pvc
        persistentVolumeClaim:
          claimName: database
